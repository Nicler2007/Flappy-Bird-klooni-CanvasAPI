üéÆ Mechanics

Title: [Mechanics] Implement game loop
Description: Add a requestAnimationFrame-based game loop and time tracking.

Title: [Mechanics] Bird physics
Description: Implement gravity, flap impulse, and velocity clamping for the bird.

Title: [Mechanics] Pipe generator
Description: Create pipe pairs with randomized gaps.

Title: [Mechanics] Pipe recycling
Description: Implement an object pool for managing pipes.

Title: [Mechanics] Collision detection
Description: Bird vs. pipe/ground + boundary checks (circle‚ÄìAABB).

Title: [Mechanics] State machine
Description: MENU ‚Üí READY ‚Üí PLAYING ‚Üí GAME_OVER.

Title: [Mechanics] Scoring and high score
Description: +1 point per pipe passed, save high score.

üé® Graphics

Title: [Graphics] Sprite sheet
Description: Bird (3 frames), pipe, ground, clouds.

Title: [Graphics] Parallax background
Description: Multiple layers moving at different speeds.

Title: [Graphics] Texts
Description: Draw text with shadow/halo for readability.

Title: [Graphics] Scaling
Description: 360x640 ‚Üí devicePixelRatio.

Title: [Graphics] PWA/manifest
Description: Basic offline/icons (optional).

üîä Sounds

Title: [Sounds] Add SFX
Description: flap, point, hit, die.

Title: [Sounds] Sound implementation
Description: HTMLAudio/WebAudio.

Title: [Sounds] Preload sounds
Description: Load before entering PLAYING state.

Title: [Sounds] Volume control
Description: Implement volume adjustments.

Title: [Sounds] Mute toggle
Description: Implement mute + persistence.

üñ• User Interface

Title: [UI] MENU view
Description: Start, Mute, help text.

Title: [UI] READY view
Description: ‚ÄúReady?‚Äù + blinking hint.

Title: [UI] HUD
Description: score at the top, high score at the bottom.

Title: [UI] GAME_OVER view
Description: result, high score, Restart button.

Title: [UI] Accessibility
Description: contrasts, keyboard support, prefers-reduced-motion.

üíæ Storage and settings

Title: [Storage] localStorage keys
Description: FB_HIGHSCORE, FB_IS_MUTED, FB_SETTINGS.

Title: [Storage] Reset function
Description: Reset high score from menu.

Title: [Storage] Schema version
Description: Version key for future changes.

üß™ Testing and performance

Title: [Testing] Unit tests
Description: pipe gap, scoring, collisions.

Title: [Testing] Manual testing
Description: DPI/resolution + mobile.

Title: [Testing] Performance testing
Description: FPS, GC spikes.

Title: [Testing] Optimizations
Description: sprite atlas, offscreenCanvas, minimize drawImage calls.

üöÄ Release

Title: [Release] Repo and folder structure
Description: Create repository and base setup.

Title: [Release] Dev server
Description: Use e.g. Vite.

Title: [Release] GitHub Pages / Netlify
Description: Deploy the game.

Title: [Release] Semver and changelog
Description: v0.1 MVP, v1.0 stable.

Flappy Bird Clone (HTML Canvas API)

Goal:
Build a browser game that replicates the classic Flappy Bird using the HTML Canvas API and JavaScript. The game will feature simple physics, scoring, a state machine, and high score saving via localStorage.

Key Features:

Bird affected by gravity, with upward impulse on user input

Randomized pipe pairs as obstacles

Scoring based on passing pipes

Collision detection (pipes, ground, ceiling)

State machine: MENU ‚Üí READY ‚Üí PLAYING ‚Üí GAME OVER

HUD, high score saving, simple UI (Start, Restart, Mute)

Responsive and mobile-friendly

Technologies:

HTML, CSS, JavaScript (ES Modules)

requestAnimationFrame game loop

localStorage (high score and settings)

Sprite sheet graphics and parallax background

Audio effects (flap, point, hit, die)

Schedule:

Day 1: Project setup and game loop

Day 2: Bird physics and input handling

Day 3: Pipes and collisions

Day 4: Scoring and state machine

Day 5: Graphics and sounds

Day 6: Storage and settings

Day 7: Testing, optimization, and release

Extension Ideas:

Theme variations (day/night)

Different pipe types

Online leaderboard

PWA installation support